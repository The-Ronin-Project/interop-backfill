services:
  backfill-server:
    restart: on-failure
    image: interop-backfill-server:local
    ports:
      - "8080"
    expose:
      - "8080"
    environment:
      SPRING_DATASOURCE_URL: "jdbc:mysql://springuser:ThePassword@mysql-server:3306/backfill-db"
      AUTH0_AUDIENCE: "https://interop-backfill.dev.projectronin.io"
      SPRING_KAFKA_BOOTSTRAPSERVERS: "kafka:19092"
      SPRING_SECURITY_OAUTH2_RESOURCESERVER_JWT_ISSUER_URI: "http://mock-oauth2:8080/backfill"
      BACKFILL_KAFKA_LISTENERREFRESH: 6000
      LOGGING_LEVEL_COM_PROJECTRONIN_INTEROP: "DEBUG"
    depends_on:
      mysql-server:
        condition: service_healthy
      kafka:
        condition: service_started

  mysql-server:
    restart: always
    image: mysql/mysql-server:latest
    environment:
      MYSQL_ROOT_PASSWORD: root
      MYSQL_ROOT_HOST: '%'
    ports:
      - "3306"
    expose:
      - "3306"
    volumes:
      - ./db:/docker-entrypoint-initdb.d
    healthcheck:
      test: [ "CMD", "mysqladmin" ,"ping", "-h", "localhost", "-u", "springuser", "-pThePassword" ]
      timeout: 5s
      retries: 3

  mock-oauth2:
    image: ghcr.io/navikt/mock-oauth2-server:0.5.4
    ports:
      - "8080"
    expose:
      - "8080"
    volumes:
      - ./:/host
    environment:
      - JSON_CONFIG_PATH=/host/mock-oauth2-config.json

  zookeeper:
    image: docker-proxy.devops.projectronin.io/zookeeper
    ports:
      - "2181:2181"
    environment:
      - KAFKA_ADVERTISED_HOST_NAME=zookeeper

  kafka:
    image: docker-proxy.devops.projectronin.io/wurstmeister/kafka
    ports:
      - "9092:9092"
    environment:
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: >-
        LISTENER_DOCKER_INTERNAL://kafka:19092,
        LISTENER_DOCKER_EXTERNAL://127.0.0.1:9092
      KAFKA_LISTENERS: >-
        LISTENER_DOCKER_INTERNAL://:19092,
        LISTENER_DOCKER_EXTERNAL://:9092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: >-
        LISTENER_DOCKER_INTERNAL:PLAINTEXT,
        LISTENER_DOCKER_EXTERNAL:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: LISTENER_DOCKER_INTERNAL
    depends_on:
      zookeeper:
        condition: service_started

  # available at http://localhost:8090. Can view topics and messages
  kafka-ui:
    image: provectuslabs/kafka-ui
    ports:
      - "8090:8080"
    restart: always
    environment:
      - KAFKA_CLUSTERS_0_NAME=local
      - KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS=kafka:19092
    depends_on:
      kafka:
        condition: service_started